static int check_cases(){
    int i;
    i = 0;
    while(i < g_n){
        if (g_top_clues[i] = 1 || g_btm_clues[i] = 1){
            case_hint_1_vert();
        }
        else if(g_left[i] = 1 ||g_right[i] = 1 ){
            case_hint_1_hori();
        }
        else if (g_top_clues[i] = g_n || g_btm_clues[i] = g_n){
            case_hint_g_n_vert();
        }
        else if (g_right[i] = g_n || g_left[i]){
            case_hint_g_n_hori();
        }
        /*else if ((g_top_clues[i] + g_btm_clues[i]) = (g_n + 1) 
        || (g_right[i] + g_left[i]) = (g_n + 1)) {

        }*/
        else if()
    }
}
// in the case hint is 1
static int case_hint_1_vert(){
    int row = 0;
    while(i < g_n) {
        if (g_top_clues[i] = 1){
            int pos = row *g_n + i;
            if (can_place(pos, g_n)){
                place(pos, g_n);
                return(0)
            }
            else
            return(1)
        }
        else if (g_btm_clues[i] = 1){
            row = g_n - 1;
            pos = row *g_n + i;
            if (can_place(pos, g_n)){
                place(pos, g_n);
                return(0)
            }
            else return(-1)
        }
    }
}

static int case_hint_1_hori(){
    while(i < g_n) {
        if (g_left[i] = 1){
            int col = 0;
            int pos = i *g_n + col;
            if (can_place(pos, g_n)){
                place(pos, g_n);
                return(0)
            }
            else
            return(1)
        }
        else if (g_right[i] = 1){
            col = g_n - 1;
            pos = i *g_n + col
            if (can_place(pos, g_n)){
                place(pos, g_n);
                return(0)
            }
            else 
                return(1);
        }
    }
}

// for the case where hint = g_n
static int case_hint_g_n_hori(){
    int i = 0;
    while(i < g_n){
        if (g_left[i] = g_n){
            int col = 0;
            while (col < g_n){
                int pos = i * g_n + col;
                int height = col + 1;
                place(pos, height);
                col++;
            }
            return(0);
        }
        else if (g_right[i] = g_n){
            int col = g_n - 1;
            while (col >= 0){
                int pos = i * g_n + col;
                int height = g_n -col;
                place(pos, height);
                col--;
            }
            return(0);

        }
    }
    return(1);
}

static int case_hint_g_n_vert(){
    int i = 0;
    while (i < g_n){
        if(g_top_clues[i] = g_n){
            int row = 0;
            while (row < g_n) {
                int pos = row * g_n + col;
                int height = row + 1;
                place(pos, height);
                row++;
            }
        }
        else if(g_btm_clues[i] = g_n){
            int row = g_n - 1;
            while (row >= 0) {
                int pos = row * g_n + col;
                int height = g_n - row; 
                 place(pos, height);
                row--;
            }
        }
    }
}
